import os
from cv2 import imread, imwrite
from transliterate import translit
import asyncio
import logging
from aiogram import Bot, Dispatcher, executor
# from aiogram.utils.exceptions import BotBlocked
import aiogram.utils.markdown as fmt
from requests import get
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from confidence_info.your_config import TOKEN
from confidence_info.your_dir import main_img_dir
import interface.all_states as FilterBotStates
from interface.markups import *
from exceptions import *
import Filters_Core as filters

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

dp.middleware.setup(LoggingMiddleware())

tokens = {"flag": 0}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_images_dir(message):
    user_images_dir = os.path.join(main_img_dir, str(message.from_user.id))
    return user_images_dir


async def send_img_text_sticker(message, img_path, text, sticker, reply_markup=None):
    if img_path is not None:
        try:
            await bot.send_photo(message.chat.id, photo=open(img_path, 'rb'))
        except:
            try:
                await bot.send_photo(message.chat.id, get(img_path).content)
            except:
                await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
    send = await bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=reply_markup)
    await bot.send_sticker(message.chat.id, open('Stickers/{}.webp'.format(sticker), 'rb'))
    return send


def create_save_path(message, images_type):
    src = os.path.join(get_user_images_dir(message),
                       images_type + "_" + translit(message.from_user.first_name, language_code='ru', reversed=True)
                       + ".jpg")
    return src


@dp.message_handler(commands="start", state="*")
async def start_message(message: types.Message):
    if not os.path.exists(get_user_images_dir(message)):
        await bot.send_message(message.chat.id, "–û, –¥–∞ —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π")
        os.mkdir(get_user_images_dir(message))
    me = await bot.get_me()
    await FilterBotStates.StartManagment.ice_cream_not_done.set()
    await send_img_text_sticker(message, None, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}!\n"
                                f"–Ø - <b>{me.first_name}</b>, –í—Å–µ–º–æ–≥—É—â–µ–µ –í—Å–µ—Å—É—â–µ–µ –ó–ª–æ!\
                                \n –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                                "hello", 
                                reply_markup=start_markup)


@dp.message_handler(commands="help", state="*")
async def help_message(message: types.Message):
    await FilterBotStates.StartManagment.ice_cream_not_done.set()
    await send_img_text_sticker(message, None, 
                                f"–î–∞–≤–∞–π-–∫–∞ —è –ø–æ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –ø–æ –ø–æ–≤–æ–¥—É —Ñ–∏–ª—å—Ç—Ä–æ–≤..\n"
                                f"<b>–ù–µ–≥–∞—Ç–∏–≤</b> - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π, –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Ü–≤–µ—Ç–∞ –º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ\n"
                                f"<b>–ì–∞–º–º–∞-—Ñ–∏–ª—å—Ç—Ä</b> - —á—É—Ç—å –ø–æ—Å–ª–æ–∂–Ω–µ–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–∞–º–º–∞ –º–µ–Ω—è–µ—Ç—Å—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å(—è—Ä–∫–æ—Å—Ç—å) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\
                                –ø–æ—Å–≤–µ—Ç–ª–µ–µ, –ø–æ—Ç–µ–º–Ω–µ–µ, –≤—Å—ë —Ç–∞–∫–æ–µ..\n"
                                f"<b>–ß—ë—Ä–Ω–æ-–±–µ–ª—ã–π</b> - –Ω—É —Ç—É—Ç—å –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞—Ö–æ–¥–∏–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Å–∫–∞–ª–∏—Ä—É–µ–º –µ–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∞—Ö –æ—Ç —á–µ—Ä–Ω–æ–≥–æ –¥–æ –±–µ–ª–æ–≥–æ —Ü–≤–µ—Ç–æ–≤\n"
                                f"<b>–°—Ä–µ–¥–Ω–∏–π —Å–¥–≤–∏–≥</b> - —Å–∫–∞–∂—É –ø–æ-–Ω–∞—É—á–Ω–æ–º—É, –æ–Ω –∑–∞–º–µ–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–≤–æ–µ–π –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–¥–∏—É—Å–∞ r üßê\–≤ –æ–±—â–µ–º –≥–ª–∞–¥–∏—Ç —Ñ–æ—Ç–æ\n"
                                f"–¢—ã –µ—â–µ –Ω–µ —É—Å–Ω—É–ª? –û—É, –Ω–µ—Ç.. –õ–∞–¥–Ω–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º\n"
                                f"<b>–¶–≤–µ—Ç–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b> - –¥–∞ —Ç—É—Ç –ª–µ–≥–∫–æ, —ç—Ç–∞ —à—Ç—É–∫–∞ –≤—ã–¥–µ–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø—Ä–∏–∫–∞–∂–µ—à—å\
                                –∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∫—Ä–∞—Å–∏—Ç –µ–≥–æ –≤ –±–µ–ª—ã–π. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç HSV (–Ω—É —Ç—ã –∑–Ω–∞–µ—à—å),\
                                —Å–æ–∑–¥–∞—ë–º HSV –º–∞—Å—Å–∏–≤—ã –æ—Ç –º–∏–Ω–∏–º—É–º–∞ –Ω–∞—à–µ–≥–æ –æ—Ç—Ç–µ–Ω–∫–∞ —Ü–≤–µ—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞, –Ω—É –∞ –¥–∞–ª—å—à–µ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ,\
                                —ç—Ç–æ –ø—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –º–Ω–æ–≥–æ–≥–æ –æ—Ç –Ω–µ–µ –Ω–µ –æ–∂–∏–¥–∞–π üôÑ\n", "stupid", reply_markup=start_markup)


@dp.message_handler(lambda message: message.text == "üçß –•–æ—á—É –º–æ—Ä–æ–∂–µ–Ω–∫—É",
                    state=FilterBotStates.StartManagment.ice_cream_not_done)
async def wanted_icecream_first_time(message: types.Message):
    await FilterBotStates.StartManagment.ice_cream_done.set()
    await send_img_text_sticker(message, "https://sc01.alicdn.com\
    /kf/UTB8CFH3C3QydeJk43PUq6AyQpXah/200128796/UTB8CFH3C3QydeJk43PUq6AyQpXah.jpg",
                                "–£–ø—Å, —è —É–∂–µ –≤—Å–µ —Å—ä–µ–ª–∞", "hehe", start_markup)
    await send_img_text_sticker(message, None, f"{message.from_user.id}", "nono", None)


@dp.message_handler(lambda message: message.text == "üçß –•–æ—á—É –º–æ—Ä–æ–∂–µ–Ω–∫—É",
                    state=FilterBotStates.StartManagment.ice_cream_done)
async def wanted_icecream_other_time(message: types.Message):
    await send_img_text_sticker(message, "https://tortodelfeo.ru\
    /wa-data/public/shop/products/88/27/2788/images/2648/2648.750.png",
                                "–î—É–º–∞–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—É–ø—Å–∏–∫ ?", "he", start_markup)


@dp.message_handler(lambda message: message.text == "üé® –ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    state=FilterBotStates.StartManagment.states)
async def image_processing(message: types.Message):
    await FilterBotStates.ImageDownload.download_not_complete.set()
    await send_img_text_sticker(message, None,
                                "–ù—É –¥–∞–≤–∞–π, –∫–∏–Ω—å —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É", "giveme", filters_markup)


# –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@dp.message_handler(content_types=["photo"], state=[FilterBotStates.StartManagment.ice_cream_not_done,
                                                    FilterBotStates.StartManagment.ice_cream_done,
                                                    FilterBotStates.Filters.color_range_working,
                                                    FilterBotStates.Filters.gamma_working])
async def download_photo(message: types.Message):
    await send_img_text_sticker(message, None, "–¢—ã —Å–ª–∏—à–∫–æ–º —Ç–æ—Ä–æ–ø–∏—à—å—Å—è, —è –Ω–µ —Ç–∞–∫–∞—è", "nono", None)


# –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message_handler(content_types=["photo"], state=FilterBotStates.ImageDownload.states)
async def download_photo(message: types.Message):
    src = create_save_path(message, "source")
    try:
        await message.photo[-1].download(destination=src)
    except:
        await send_img_text_sticker(message, None, "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å \
        –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç—ã –±—ã–ª —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–æ–∫.. \n –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ üòü",
                                    "cry", None)
    else:
        await FilterBotStates.ImageDownload.download_done.set()
        filters_to_clear = ["negative", "gray", "mean_shift", "pixel", "cartoon", "gamma", "morphling", "mosaic",
                            "border"]
        for clear_degit in filters_to_clear:
            if os.path.exists(create_save_path(message, clear_degit)):
                os.remove(create_save_path(message, clear_degit))
        await send_img_text_sticker(message, None, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –±—Ä–∞—Ç–∏–∫, –±–µ–∑ —Å–ª—ë–∑ –Ω–µ –≤–∑–≥–ª—è–Ω–µ—à—å, –¥–∞–π–∫–∞ —è –ø–æ—Ä–∞–±–æ—Ç–∞—é",
                                    "omg", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—Å—Ö–æ–¥–Ω–∏–∫" –∏ –≤—ã—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text == "–ò—Å—Ö–æ–¥–Ω–∏–∫",
                    state=FilterBotStates.ImageDownload.download_done)
async def get_source(message: types.Message):
    img_path = create_save_path(message, "source")
    await send_img_text_sticker(message, img_path, "–° —Ç–∞–∫–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞ —Å—Ç–∞–ª–æ —Ç–æ–ª—å–∫–æ —Ö—É–∂–µ XD", "haha", None)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ–≥–∞—Ç–∏–≤" –∏ –≤—ã—Å—ã–ª–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.text == "–ù–µ–≥–∞—Ç–∏–≤",
                    state=FilterBotStates.ImageDownload.download_done)
async def filter_negative(message: types.Message):
    try:
        if not os.path.exists(create_save_path(message, "negative")):
            src_img_path = create_save_path(message, "source")
            img_path = create_save_path(message, "negative")
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Negative_Filter(img)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        else:
            img_path = create_save_path(message, "negative")
            await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?",
                                        "iamnotarobot")
    except ImreadError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
    except ImwriteError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π" –∏ –≤—ã—Å—ã–ª–∞–µ–º —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.text == "–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π", state=FilterBotStates.ImageDownload.download_done)
async def filter_gray_scale(message: types.Message):
    try:
        if not os.path.exists(create_save_path(message, "gray")):
            src_img_path = create_save_path(message, "source")
            img_path = create_save_path(message, "gray")
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Gray_Filter(img)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        else:
            img_path = create_save_path(message, "gray")
            await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?",
                                        "iamnotarobot")
    except ImreadError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
    except ImwriteError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


@dp.message_handler(lambda message: message.text == "–¶–≤–µ—Ç–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                    state=FilterBotStates.ImageDownload.download_done)
async def colors(message: types.Message):
    await FilterBotStates.Filters.color_range_working.set()
    await send_img_text_sticker(message, None, "–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏, –¥–æ—Ä–æ–≥—É—à–∞", "mayi", colors_markup)


@dp.message_handler(lambda message: message.text == "–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è",
                    state=FilterBotStates.ImageDownload.download_done)
async def morph_choosing(message: types.Message):
    await FilterBotStates.Filters.morph_choosing_working.set()
    await send_img_text_sticker(message, None, "–ê –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", "mayi", morph_markup)


@dp.message_handler(state=FilterBotStates.Filters.morph_choosing_working)
async def morph_settings_choosing(message: types.Message):
    if message.text == "–ú–æ–∑–∞–π–∫–∞":
        await FilterBotStates.MorphManagment.mosaic_working.set()
        await send_img_text_sticker(message, None,
                                    "–° –∫–∞–∫–∏–º —è–¥—Ä–æ–º –∏ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç—É –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—é?\n'–ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ'\
                                    \'–õ—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã'\n–ù—É –∏–ª–∏ –¥–æ–≤–µ—Ä—å—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", "mayi",
                                    morph_set_prof_markup)
    elif message.text == "–ü–æ—Ä–∞–±–æ—Ç–∞–µ–º —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏":
        await FilterBotStates.MorphManagment.border_working.set()
        await send_img_text_sticker(message, None,
                                    "–° –∫–∞–∫–∏–º —è–¥—Ä–æ–º –∏ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç—É –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—é?\n'–ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ'\
                                    \'–õ—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã'\n–ù—É –∏–ª–∏ –¥–æ–≤–µ—Ä—å—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", "mayi",
                                    morph_set_prof_markup)
    elif message.text == "–ú–æ—Ä—Ñ–ª–∏–Ω–≥":
        await FilterBotStates.MorphManagment.morphling_working.set()
        await send_img_text_sticker(message, None,
                                    "–° –∫–∞–∫–∏–º —è–¥—Ä–æ–º –∏ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç—É –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—é?\n'–ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ' \
                                    \'–õ—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã'\n–ù—É –∏–ª–∏ –¥–æ–≤–µ—Ä—å—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", "mayi",
                                    morph_set_prof_markup)
    else:
        await send_img_text_sticker(message, None, "–Ø —Ç–∞–∫–æ–≥–æ –Ω–µ –∑–Ω–∞—é, –ø–æ–≤—Ç–æ—Ä–∏-–∫–∞",
                                    "kus", morph_markup)


@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å", state=[
                    FilterBotStates.MorphManagment.morphling_working,
                    FilterBotStates.MorphManagment.border_working,
                    FilterBotStates.MorphManagment.mosaic_working
                    ])
async def reset(message: types.Message):
    await FilterBotStates.ImageDownload.download_done.set()
    await send_img_text_sticker(message, None, "–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ", "evil", filters_markup)


@dp.message_handler(state=[
                    FilterBotStates.MorphManagment.morphling_working,
                    FilterBotStates.MorphManagment.border_working,
                    FilterBotStates.MorphManagment.mosaic_working
                    ])
async def morph_settings_choosing(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    current_state = str(current_state)
    if current_state == "MorphManagment:mosaic_working":
        try:
            parametrs = filters.param(message.text, 'mosaic')
        except:
            await send_img_text_sticker(message, None,
                                        "–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–µ–Ω—è –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", "kus",
                                        morph_set_prof_markup)
        else:
            await FilterBotStates.MorphManagment.mosaic_working.set()
            try:
                src_img_path = create_save_path(message, "source")
                img_path = create_save_path(message, "mosaic")
                img = imread(src_img_path)
                if img is None:
                    raise ImreadError
                img_res = filters.Mosaic_Filter(img, parametrs[0], parametrs[1])
                if not imwrite(img_path, img_res):
                    raise ImwriteError
                await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
            except ImreadError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
            except ImwriteError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)
    elif current_state == "MorphManagment:border_working":
        try:
            parametrs = filters.param(message.text, 'border')
        except:
            await send_img_text_sticker(message, None,
                                        "–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–µ–Ω—è –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", "kus",
                                        morph_set_prof_markup)
        else:
            await FilterBotStates.MorphManagment.border_working.set()
            try:
                src_img_path = create_save_path(message, "source")
                img_path = create_save_path(message, "border")
                img = imread(src_img_path)
                if img is None:
                    raise ImreadError
                img_res = filters.Border_Filter(img, parametrs[0], parametrs[1])
                if not imwrite(img_path, img_res):
                    raise ImwriteError
                await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
            except ImreadError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
            except ImwriteError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)
    else:
        try:
            parametrs = filters.param(message.text, 'morphling')
        except:
            await send_img_text_sticker(message, None,
                                        "–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–µ–Ω—è –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", "kus",
                                        morph_set_prof_markup)
        else:
            await FilterBotStates.MorphManagment.morphling_working.set()
            try:
                src_img_path = create_save_path(message, "source")
                img_path = create_save_path(message, "morphling")
                img = imread(src_img_path)
                if img is None:
                    raise ImreadError
                img_res = filters.Morphling_Filter(img, parametrs[0], parametrs[1])
                if not imwrite(img_path, img_res):
                    raise ImwriteError
                await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
            except ImreadError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
            except ImwriteError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


@dp.message_handler(lambda message: message.text == "–ú—É–ª—å—Ç–∏–∫–æ–ª–∏–∑–∞—Ü–∏—è",
                    state=FilterBotStates.ImageDownload.download_done)
async def filter_cartoon(message: types.Message):
    try:
        if not os.path.exists(create_save_path(message, "cartoon")):
            src_img_path = create_save_path(message, "source")
            img_path = create_save_path(message, "cartoon")
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Cartoon_Filter(img)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        else:
            img_path = create_save_path(message, "cartoon")
            await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?",
                                        "iamnotarobot")
    except ImreadError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
    except ImwriteError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


@dp.message_handler(state=FilterBotStates.Filters.color_range_working)
async def Color_Range(message: types.Message):
    try:
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "color_range")
        img = imread(src_img_path)
        if img is None:
            raise ImreadError
        try:
            img_res = filters.Color_Range_Filter(img, message.text)
        except:
            await FilterBotStates.Filters.color_range_working.set()
            await send_img_text_sticker(message, None, "–°–∫–∞–∑–∞–ª–∞ –∂–µ, —Ü–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏ \n –ö–∞–∂–¥—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ –∂–µ–ª–∞–µ—Ç –∑–Ω–∞—Ç—å..",
                                        "kus", colors_markup)
        if not imwrite(img_path, img_res):
            raise ImwriteError
        await FilterBotStates.ImageDownload.download_done.set()
        await send_img_text_sticker(message, img_path, "–ù–∏—á–µ–≥–æ —Å–µ–±–µ –∫–∞–∫ —è –º–æ–≥—É", "beautiful", filters_markup)
    except ImreadError:
        await FilterBotStates.ImageDownload.download_done.set()
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
    except ImwriteError:
        await FilterBotStates.ImageDownload.download_done.set()
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


@dp.message_handler(lambda message: message.text == "–ì–∞–º–º–∞ –§–∏–ª—å—Ç—Ä",
                    state=FilterBotStates.ImageDownload.download_done)
async def filter_gamma(message: types.Message):
    await FilterBotStates.Filters.gamma_working.set()
    tokens["flag"] = 0
    if not os.path.exists(create_save_path(message, "gamma")):
        await send_img_text_sticker(message, None, "–¢–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–º–º–∞, –º–∏–ª–∞—à–∫–∞?", "mayi", baby_help_markup)
    else:
        await send_img_text_sticker(message, None, "–í–≤–µ–¥–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–º–º–∞, —Å–ª–∞–¥–∫–∏–π", "giveme", baby_enough_markup)


@dp.message_handler(state=FilterBotStates.Filters.gamma_working)
async def Gamma_Function(message):
    if message.text == '–ü–µ—Ä–µ—Å—Ç–∞–Ω—å':
        await FilterBotStates.ImageDownload.download_done.set()
        await send_img_text_sticker(message, None, "–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ", "evil", filters_markup)
    else:
        try:
            gamma = filters.Gamma_Num((message.text + ' ')[: message.text.find(' ')])
        except:  # –∫–∞–∫–∞—è –æ—à–∏–±–∫–∞
            tokens["flag"] += 1
            if tokens["flag"] == 1:
                await send_img_text_sticker(message, None, "–ì–∞–º–º–∞ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ!", "kus", baby_help_markup)
            elif tokens["flag"] == 2:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–ò–∑–¥–µ–≤–∞–µ—à—å—Å—è, –¥–∞?", "cry", filters_markup)
        else:
            tokens['flag'] = 0

        if tokens["flag"] == 0:
            try:
                if not os.path.exists(create_save_path(message, "gamma")):
                    src_img_path = create_save_path(message, "source")
                else:
                    src_img_path = create_save_path(message, "gamma")
                img_path = create_save_path(message, "gamma")
                img = imread(src_img_path)
                if img is None:
                    raise ImreadError
                img_res = filters.Gamma_Filter(img, gamma)
                if not imwrite(img_path, img_res):
                    raise ImwriteError
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, img_path, "–û –¥–∞, —è –¥–∞–∂–µ –Ω–µ –æ–∂–∏–¥–∞–ª–∞, —á—Ç–æ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∏—Ç—Å—è",
                                            "thatsgood",
                                            filters_markup)
            except ImreadError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
            except ImwriteError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


@dp.message_handler(lambda message: message.text == "–°—Ä–µ–¥–Ω–∏–π —Å–¥–≤–∏–≥",
                    state=FilterBotStates.ImageDownload.download_done)
async def filter_meanshift(message: types.Message):
    if not os.path.exists(create_save_path(message, "mean_shift")):
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "mean_shift")
        try:
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Mean_Shift_Filter(img)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ê—Ö, –∫–∞–∫ –∂–µ —è —Ö–æ—Ä–æ—à–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∞", "wow", None)
        except ImreadError:
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
        except ImwriteError:
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)
    else:
        img_path = create_save_path(message, "mean_shift")
        await send_img_text_sticker(message, img_path,
                                    "–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä, –∏–º–µ–π —Å–æ–≤–µ—Å—Ç—å! –Ø —Ç—É—Ç –Ω–µ –±–µ–∑ –¥–µ–ª–∞ —Å–∏–∂—É ...",
                                    "tired")


@dp.message_handler(lambda message: message.text == "–ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è",
                    state=FilterBotStates.ImageDownload.download_done)
async def filter_pixel(message: types.Message):
    if not os.path.exists(create_save_path(message, "pixel")):
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "pixel")
        try:
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Pixel_Filter(img)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        except ImreadError:
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
        except ImwriteError:
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)
    else:
        img_path = create_save_path(message, "pixel")
        await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?",
                                    "iamnotarobot")


@dp.message_handler(lambda message: message.text == "–Ø —É—Å—Ç–∞–ª",
                    state=FilterBotStates.ImageDownload.download_done)
async def image_processing(message: types.Message):
    await FilterBotStates.StartManagment.ice_cream_not_done.set()
    await send_img_text_sticker(message, None, "–ë–µ–¥–Ω–µ–Ω—å–∫–∏–π, –¥–∞–≤–∞–π —è —Ç–µ–±—è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è ...", "relax",
                                start_markup)


@dp.message_handler(content_types=[types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
    await message.reply_animation(message.animation.file_id)


@dp.message_handler(state="*")
async def echo_message(message):
    await send_img_text_sticker(message, None,
                                f"–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢\n"
                                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n/start - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ \n"
                                f"/help - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É—Ä–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö", "noanswer", start_markup)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
