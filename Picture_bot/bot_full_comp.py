import os
from cv2 import imread, imwrite
from transliterate import translit
import logging
from aiogram import Bot, Dispatcher, executor
from requests import get
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from confidence_info.your_config import TOKEN
from confidence_info.your_dir import main_img_dir
import interface.all_states as FilterBotStates
from interface.markups import *
from exceptions import *
import Filters_Core as filters
from base import words_base

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

dp.middleware.setup(LoggingMiddleware())

url_img = "https://tortodelfeo.ru//wa-data/public/shop/products/88/27/2788/images/2648/2648.750.png"


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_images_dir(message):
    user_images_dir = os.path.join(main_img_dir, str(message.from_user.id))
    return user_images_dir


async def send_img_text_sticker(message, img_path, text, sticker, reply_markup=None):
    if img_path is not None:
        try:
            await bot.send_photo(message.chat.id, photo=open(img_path, 'rb'))
        except:
            try:
                await bot.send_photo(message.chat.id, get(img_path).content)
            except:
                await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
    send = await bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=reply_markup)
    await bot.send_sticker(message.chat.id, open('Stickers/{}.webp'.format(sticker), 'rb'))
    return send


def create_save_path(message, images_type):
    src = os.path.join(get_user_images_dir(message),
                       images_type + "_" + translit(message.from_user.first_name, language_code='ru', reversed=True)
                       + ".jpg")
    return src


@dp.message_handler(commands="start", state="*")
async def start_message(message: types.Message):
    if not os.path.exists(get_user_images_dir(message)):
        await bot.send_message(message.chat.id, "–û, –¥–∞ —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π")
        os.mkdir(get_user_images_dir(message))
    me = await bot.get_me()
    await FilterBotStates.StartManagment.ice_cream_not_done.set()
    await send_img_text_sticker(message, None, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}!\n"
                                f"–Ø - <b>{me.first_name}</b>, –í—Å–µ–º–æ–≥—É—â–µ–µ –í—Å–µ—Å—É—â–µ–µ –ó–ª–æ!\
                                \n –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                                "hello", 
                                reply_markup=start_markup)


@dp.message_handler(commands="help", state="*")
async def help_message(message: types.Message):
    await FilterBotStates.StartManagment.ice_cream_not_done.set()
    await send_img_text_sticker(message, None, words_base[1], "stupid", reply_markup=start_markup)


@dp.message_handler(lambda message: message.text == "üïµ‚Äç‚ôÇÔ∏è–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
                    state=FilterBotStates.StartManagment.states)
async def help_message(message: types.Message):
    await FilterBotStates.StartManagment.ice_cream_not_done.set()
    await send_img_text_sticker(message, None, words_base[1], "stupid", reply_markup=start_markup)


@dp.message_handler(lambda message: message.text == "üçß –•–æ—á—É –º–æ—Ä–æ–∂–µ–Ω–∫—É",
                    state=FilterBotStates.StartManagment.ice_cream_not_done)
async def wanted_icecream_first_time(message: types.Message):
    await FilterBotStates.StartManagment.ice_cream_done.set()
    await send_img_text_sticker(message, url_img, "–£–ø—Å, —è —É–∂–µ –≤—Å–µ —Å—ä–µ–ª–∞", "hehe", start_markup)


@dp.message_handler(lambda message: message.text == "üçß –•–æ—á—É –º–æ—Ä–æ–∂–µ–Ω–∫—É",
                    state=FilterBotStates.StartManagment.ice_cream_done)
async def wanted_icecream_other_time(message: types.Message):
    await send_img_text_sticker(message, url_img, "–î—É–º–∞–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—É–ø—Å–∏–∫?", "he", start_markup)


@dp.message_handler(lambda message: message.text == "üé® –ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    state=[
                        FilterBotStates.StartManagment.ice_cream_done,
                        FilterBotStates.StartManagment.ice_cream_not_done,
                        FilterBotStates.ImageDownload.download_not_complete])
async def image_processing(message: types.Message):
    await FilterBotStates.ImageDownload.download_not_complete.set()
    await send_img_text_sticker(message, None, "–ù—É –¥–∞–≤–∞–π, –∫–∏–Ω—å —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É", "giveme", types.ReplyKeyboardRemove())


# –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@dp.message_handler(content_types=["photo"], state=FilterBotStates.StartManagment.states +
                                                  FilterBotStates.Filters.states +
                                                  FilterBotStates.Gamma_filter.states +
                                                  FilterBotStates.MorphManagment.states)
async def download_photo(message: types.Message):
    await send_img_text_sticker(message, None, "–¢—ã —Å–ª–∏—à–∫–æ–º —Ç–æ—Ä–æ–ø–∏—à—å—Å—è, —è –Ω–µ —Ç–∞–∫–∞—è", "nono", None)


# –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message_handler(content_types=["photo"], state=FilterBotStates.ImageDownload.states)
async def download_photo(message: types.Message):
    src = create_save_path(message, "source")
    try:
        await message.photo[-1].download(destination=src)
    except:
        await send_img_text_sticker(message, None, "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å" + \
        "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç—ã –±—ã–ª —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–æ–∫.. \n –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ üòü",
                                    "cry", None)
    else:
        await FilterBotStates.ImageDownload.download_done.set()
        filters_to_clear = [
            "negative", "gray", "mean_shift", "color_range", "pixel", "cartoon", "gamma", "open",
            "open", "grad", "sobel"]
        for clear_degit in filters_to_clear:
            if os.path.exists(create_save_path(message, clear_degit)):
                os.remove(create_save_path(message, clear_degit))
        await send_img_text_sticker(message, None, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –±—Ä–∞—Ç–∏–∫, –±–µ–∑ —Å–ª—ë–∑ –Ω–µ –≤–∑–≥–ª—è–Ω–µ—à—å, –¥–∞–π–∫–∞ —è –ø–æ—Ä–∞–±–æ—Ç–∞—é",
                                    "omg", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—Å—Ö–æ–¥–Ω–∏–∫" –∏ –≤—ã—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text == "–ò—Å—Ö–æ–¥–Ω–∏–∫",
                    state=FilterBotStates.ImageDownload.download_done)
async def get_source(message: types.Message):
    img_path = create_save_path(message, "source")
    await send_img_text_sticker(message, img_path, "–° —Ç–∞–∫–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞ —Å—Ç–∞–ª–æ —Ç–æ–ª—å–∫–æ —Ö—É–∂–µ)", "haha", None)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ–≥–∞—Ç–∏–≤" –∏ –≤—ã—Å—ã–ª–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.text == "–ù–µ–≥–∞—Ç–∏–≤",
                    state=FilterBotStates.ImageDownload.download_done)
async def filter_negative(message: types.Message):
    try:
        if not os.path.exists(create_save_path(message, "negative")):
            src_img_path = create_save_path(message, "source")
            img_path = create_save_path(message, "negative")
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Negative_Filter(img)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        else:
            img_path = create_save_path(message, "negative")
            await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?",
                                        "iamnotarobot")
    except ImreadError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
    except ImwriteError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π" –∏ –≤—ã—Å—ã–ª–∞–µ–º —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.text == "–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π", state=FilterBotStates.ImageDownload.download_done)
async def filter_gray_scale(message: types.Message):
    try:
        if not os.path.exists(create_save_path(message, "gray")):
            src_img_path = create_save_path(message, "source")
            img_path = create_save_path(message, "gray")
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Gray_Filter(img)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        else:
            img_path = create_save_path(message, "gray")
            await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?",
                                        "iamnotarobot")
    except ImreadError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
    except ImwriteError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å "–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è"
@dp.message_handler(lambda message: message.text == "–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è",
                    state=FilterBotStates.ImageDownload.download_done)
async def morph_choosing(message: types.Message):
    await FilterBotStates.Filters.morph_choosing_working.set()
    await send_img_text_sticker(message, None, "–ê –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", "mayi", morph_markup)


# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ morph
@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å", state=FilterBotStates.MorphManagment.states)
async def reset(message: types.Message):
    await FilterBotStates.ImageDownload.download_done.set()
    await send_img_text_sticker(message, None, "–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ. –ß—Ç–æ —Ç—ã —Ç–∞–∫ –∑–∞–≤—ë–ª—Å—è", "evil", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–µ–º–µ–π—Å—Ç–≤–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ morph
@dp.message_handler(state=FilterBotStates.Filters.morph_choosing_working)
async def morph_settings_choosing(message: types.Message):
    if message.text in ["–û—Ç–∫—Ä—ã—Ç–∏–µ", "–ß–µ—Ä–Ω–∞—è —à–ª—è–ø–∞", "–ì—Ä–∞–¥–∏–µ–Ω—Ç"]:
        if message.text == "–û—Ç–∫—Ä—ã—Ç–∏–µ":
            await FilterBotStates.MorphManagment.open_working.set()
        elif message.text == "–ì—Ä–∞–¥–∏–µ–Ω—Ç":
            await FilterBotStates.MorphManagment.grad_working.set()
        else:
            await FilterBotStates.MorphManagment.blackhat_working.set()
        await send_img_text_sticker(message, None, words_base[18], "mayi",
                                    set_prof_markup)
    else:
        await send_img_text_sticker(message, None, "–Ø —Ç–∞–∫–æ–≥–æ –Ω–µ –∑–Ω–∞—é, –ø–æ–≤—Ç–æ—Ä–∏-–∫–∞",
                                    "kus", morph_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ morph
@dp.message_handler(state=FilterBotStates.MorphManagment.states)
async def morph_processing(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    current_state = str(current_state)
    if current_state == "MorphManagment:open_working":
        try:
            parametrs = filters.param(message.text, 'open')
        except:
            await send_img_text_sticker(message, None,
                                        "–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–µ–Ω—è –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", "kus",
                                        set_prof_markup)
        else:
            try:
                src_img_path = create_save_path(message, "source")
                img_path = create_save_path(message, "open")
                img = imread(src_img_path)
                if img is None:
                    raise ImreadError
                img_res = filters.Open_Filter(img, parametrs[0], parametrs[1])
                if not imwrite(img_path, img_res):
                    raise ImwriteError
                await FilterBotStates.MorphManagment.open_working.set()
                await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
            except ImreadError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
            except ImwriteError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)
    elif current_state == "MorphManagment:grad_working":
        try:
            parametrs = filters.param(message.text, 'grad')
        except:
            await send_img_text_sticker(message, None,
                                        "–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–µ–Ω—è –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", "kus",
                                        set_prof_markup)
        else:
            try:
                src_img_path = create_save_path(message, "source")
                img_path = create_save_path(message, "grad")
                img = imread(src_img_path)
                if img is None:
                    raise ImreadError
                img_res = filters.Grad_Filter(img, parametrs[0], parametrs[1])
                if not imwrite(img_path, img_res):
                    raise ImwriteError
                await FilterBotStates.MorphManagment.grad_working.set()
                await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
            except ImreadError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
            except ImwriteError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)
    else:
        try:
            parametrs = filters.param(message.text, 'blackhat')
        except:
            await send_img_text_sticker(message, None,
                                        "–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–µ–Ω—è –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", "kus",
                                        set_prof_markup)
        else:
            try:
                src_img_path = create_save_path(message, "source")
                img_path = create_save_path(message, "blackhat")
                img = imread(src_img_path)
                if img is None:
                    raise ImreadError
                img_res = filters.Blackhat_Filter(img, parametrs[0], parametrs[1])
                if not imwrite(img_path, img_res):
                    raise ImwriteError
                await FilterBotStates.MorphManagment.blackhat_working.set()
                await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
            except ImreadError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
            except ImwriteError:
                await FilterBotStates.ImageDownload.download_done.set()
                await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å "–ú—É–ª—å—Ç–∏–∫–æ–ª–∏–∑–∞—Ü–∏—è"
@dp.message_handler(lambda message: message.text == "–ú—É–ª—å—Ç–∏–∫–æ–ª–∏–∑–∞—Ü–∏—è",
                    state=FilterBotStates.ImageDownload.download_done)
async def filter_cartoon(message: types.Message):
    try:
        if not os.path.exists(create_save_path(message, "cartoon")):
            src_img_path = create_save_path(message, "source")
            img_path = create_save_path(message, "cartoon")
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Cartoon_Filter(img)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        else:
            img_path = create_save_path(message, "cartoon")
            await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?",
                                        "iamnotarobot")
    except ImreadError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
    except ImwriteError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å "–¶–≤–µ—Ç–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω"
@dp.message_handler(lambda message: message.text == "–¶–≤–µ—Ç–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                    state=FilterBotStates.ImageDownload.download_done)
async def colors(message: types.Message):
    await FilterBotStates.Filters.color_range_working.set()
    await send_img_text_sticker(message, None, "–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏, –¥–æ—Ä–æ–≥—É—à–∞", "mayi", colors_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ü–≤–µ—Ç–æ–º –Ω–∞ —Ä–∞–±–æ—Ç—É —Ñ–∏–ª—å—Ç—Ä–∞ "–¶–≤–µ—Ç–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω"
@dp.message_handler(state=FilterBotStates.Filters.color_range_working)
async def Color_Range(message: types.Message):
    try:
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "color_range")
        img = imread(src_img_path)
        if img is None:
            raise ImreadError
        try:
            img_res = filters.Color_Range_Filter(img, message.text)
        except:
            await FilterBotStates.Filters.color_range_working.set()
            await send_img_text_sticker(message, None, "–°–∫–∞–∑–∞–ª–∞ –∂–µ, —Ü–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏ \n –ö–∞–∂–¥—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ –∂–µ–ª–∞–µ—Ç –∑–Ω–∞—Ç—å..",
                                        "kus", colors_markup)
        if not imwrite(img_path, img_res):
            raise ImwriteError
        await FilterBotStates.ImageDownload.download_done.set()
        await send_img_text_sticker(message, img_path, "–ù–∏—á–µ–≥–æ —Å–µ–±–µ –∫–∞–∫ —è –º–æ–≥—É", "beautiful", filters_markup)
    except ImreadError:
        await FilterBotStates.ImageDownload.download_done.set()
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
    except ImwriteError:
        await FilterBotStates.ImageDownload.download_done.set()
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å "–ì–∞–º–º–∞ –§–∏–ª—å—Ç—Ä"
@dp.message_handler(lambda message: message.text == "–ì–∞–º–º–∞ –§–∏–ª—å—Ç—Ä", state=FilterBotStates.ImageDownload.download_done)
async def filter_gamma(message: types.Message):
    await FilterBotStates.Gamma_filter.gamma_start.set()
    await send_img_text_sticker(message, None, "–í–≤–µ–¥–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–º–º–∞, —Å–ª–∞–¥–∫–∏–π", "giveme", baby_help_markup)


# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ gamma
@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å", state=FilterBotStates.Gamma_filter.states)
async def reset(message: types.Message):
    await FilterBotStates.ImageDownload.download_done.set()
    await send_img_text_sticker(message, None, "–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ. –ß—Ç–æ —Ç—ã —Ç–∞–∫ –∑–∞–≤—ë–ª—Å—è", "evil", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è gamma_filter
@dp.message_handler(state=[
                    FilterBotStates.Gamma_filter.gamma_start,
                    FilterBotStates.Gamma_filter.gamma_1])
async def Gamma_Function(message, state: FSMContext):
    current_state = await state.get_state()
    current_state = str(current_state)
    try:
        gamma_value = filters.Num((message.text + ' ')[: message.text.find(' ')])
        if gamma_value == 0.0:
            raise Zero_Error
    except Exception as e:
        if current_state == "Gamma_filter:gamma_start":
            await FilterBotStates.Gamma_filter.gamma_1.set()
            if str(type(e)) == "<class 'exceptions.Zero_Error'>":
                await send_img_text_sticker(message, None, "–ê–≥–∞, –Ω–æ–ª—å, —Ö–æ—Ä–æ—à–æ —Ç—ã –ø—Ä–∏–¥—É–º–∞–ª..", "he", baby_help_markup)
            else:
                await send_img_text_sticker(message, None, "–ì–∞–º–º–∞ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ!", "kus", baby_help_markup)
        elif current_state == "Gamma_filter:gamma_1":
            await FilterBotStates.ImageDownload.download_done.set()
            await send_img_text_sticker(message, None, "–ò–∑–¥–µ–≤–∞–µ—à—å—Å—è, –¥–∞?", "cry", filters_markup)
    else:
        try:
            if not os.path.exists(create_save_path(message, "gamma")):
                src_img_path = create_save_path(message, "source")
            else:
                src_img_path = create_save_path(message, "gamma")
            img_path = create_save_path(message, "gamma")
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Gamma_Filter(img, gamma_value)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await FilterBotStates.Gamma_filter.gamma_start.set()
            await send_img_text_sticker(message, img_path, "–û –¥–∞, —è –¥–∞–∂–µ –Ω–µ –æ–∂–∏–¥–∞–ª–∞, —á—Ç–æ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∏—Ç—Å—è",
                                        "thatsgood",
                                        baby_help_markup)
        except ImreadError:
            await FilterBotStates.ImageDownload.download_done.set()
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
        except ImwriteError:
            await FilterBotStates.ImageDownload.download_done.set()
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å "–°—Ä–µ–¥–Ω–∏–π —Å–¥–≤–∏–≥"
@dp.message_handler(lambda message: message.text == "–°—Ä–µ–¥–Ω–∏–π —Å–¥–≤–∏–≥", state=FilterBotStates.ImageDownload.download_done)
async def filter_gamma(message: types.Message):
    await FilterBotStates.Filters.meanshift_working.set()
    await send_img_text_sticker(message, None, "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ö–æ—á–µ—à—å —Ö–æ—á–µ—à—å, –º–º? –¢–æ–ª—å–∫–æ —á—É—Ä –Ω–µ –±–æ–ª—å—à–µ –ø—è—Ç–∏",
                                "giveme", set_prof_markup)


# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ mean_shift
@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å", state=FilterBotStates.Filters.meanshift_working)
async def reset(message: types.Message):
    await FilterBotStates.ImageDownload.download_done.set()
    await send_img_text_sticker(message, None, "–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ. –ß—Ç–æ —Ç—ã —Ç–∞–∫ –∑–∞–≤—ë–ª—Å—è", "evil", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å "–°—Ä–µ–¥–Ω–∏–π —Å–¥–≤–∏–≥"
@dp.message_handler(state=FilterBotStates.Filters.meanshift_working)
async def filter_meanshift(message: types.Message):
    try:
        parametr = 0
        if message.text == "–ü–æ—Ä–∞–±–æ—Ç–∞–π":
            parametr = 1
        else:
            parametr = int(message.text)
            if parametr == 0:
                raise Zero_Error
            if parametr > 5:
                raise Big_Error
            if parametr < 0:
                raise Minus_Error
    except Exception as e:
        if str(type(e)) == "<class 'exceptions.Zero_Error'>":
            await send_img_text_sticker(message, None, "–ê–≥–∞, –Ω–æ–ª—å, —Ö–æ—Ä–æ—à–æ —Ç—ã –ø—Ä–∏–¥—É–º–∞–ª..", "he", set_prof_markup)
        elif str(type(e)) == "<class 'exceptions.Big_Error'>":
            await send_img_text_sticker(message, None, "–û–≥–æ, –∫–∞–∫–æ–µ –±–æ–ª—å—à–µ —á–∏—Å–ª–æ, –∞ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—å—à–µ?", "kus",
                                        set_prof_markup)
        elif str(type(e)) == "<class 'exceptions.Minus_Error'>":
            await send_img_text_sticker(message, None, "–ú–æ–∂–µ—Ç —Ç—ã –µ—â–µ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏–∑–æ–±—Ä–µ—Ç–µ—à—å?", "kus",
                                        set_prof_markup)
        else:
            await send_img_text_sticker(message, None, "–Ø –≤—Ä–æ–¥–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–∏–ª–∞", "kus", set_prof_markup)
    else:
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "mean_shift")
        try:
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Mean_Shift_Filter(img, parametr)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ê—Ö, –∫–∞–∫ –∂–µ —è —Ö–æ—Ä–æ—à–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∞", "wow", set_prof_markup)
        except ImreadError:
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
        except ImwriteError:
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è"
@dp.message_handler(lambda message: message.text == "–ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è",
                    state=FilterBotStates.ImageDownload.download_done)
async def params(message: types.Message):
    await FilterBotStates.Filters.pixel_working.set()
    await send_img_text_sticker(message, None, "–ü–æ–¥—Ä–µ–≥—É–ª–∏—Ä—É–π —É—Ä–æ–≤–µ–Ω—å –ø–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏–∏, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω—É—É —Å–∫–∞–∂–µ–º, –¥–æ 32",
                                "mayi", set_prof_markup)


# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ pixel
@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å", state=FilterBotStates.Filters.pixel_working)
async def reset(message: types.Message):
    await FilterBotStates.ImageDownload.download_done.set()
    await send_img_text_sticker(message, None, "–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ. –ß—Ç–æ —Ç—ã —Ç–∞–∫ –∑–∞–≤—ë–ª—Å—è", "evil", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è pixel_filter
@dp.message_handler(state=FilterBotStates.Filters.pixel_working)
async def filter_pixel(message: types.Message):
    try:
        parametr = 0
        if message.text == "–ü–æ—Ä–∞–±–æ—Ç–∞–π":
            parametr = 2
        else:
            parametr = int(message.text)
            if parametr == 0:
                raise Zero_Error
            if parametr > 31:
                raise Big_Error
            if parametr < 0:
                raise Minus_Error
    except Exception as e:
        if str(type(e)) == "<class 'exceptions.Zero_Error'>":
            await send_img_text_sticker(message, None, "–ê–≥–∞, –Ω–æ–ª—å, —Ö–æ—Ä–æ—à–æ —Ç—ã –ø—Ä–∏–¥—É–º–∞–ª..", "he", set_prof_markup)
        elif str(type(e)) == "<class 'exceptions.Big_Error'>":
            await send_img_text_sticker(message, None, "–û–≥–æ, –∫–∞–∫–æ–µ –±–æ–ª—å—à–µ —á–∏—Å–ª–æ, –∞ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—å—à–µ?", "kus",
                                        set_prof_markup)
        elif str(type(e)) == "<class 'exceptions.Minus_Error'>":
            await send_img_text_sticker(message, None, "–ú–æ–∂–µ—Ç —Ç—ã –µ—â–µ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏–∑–æ–±—Ä–µ—Ç–µ—à—å?", "kus",
                                        set_prof_markup)
        else:
            await send_img_text_sticker(message, None, "–Ø –≤—Ä–æ–¥–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–∏–ª–∞", "kus", set_prof_markup)
    else:
        src_img_path = create_save_path(message, "source")
        img_path = create_save_path(message, "pixel")
        try:
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Pixel_Filter(img, parametr)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        except ImreadError:
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
        except ImwriteError:
            await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–¥–µ–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã"
@dp.message_handler(lambda message: message.text == "–í—ã–¥–µ–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã", state=FilterBotStates.ImageDownload.download_done)
async def filter_sobel(message: types.Message):
    try:
        if not os.path.exists(create_save_path(message, "sobel")):
            src_img_path = create_save_path(message, "source")
            img_path = create_save_path(message, "sobel")
            img = imread(src_img_path)
            if img is None:
                raise ImreadError
            img_res = filters.Sobel_Filter(img)
            if not imwrite(img_path, img_res):
                raise ImwriteError
            await send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
        else:
            img_path = create_save_path(message, "sobel")
            await send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?",
                                        "iamnotarobot")
    except ImreadError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", "cry", filters_markup)
    except ImwriteError:
        await send_img_text_sticker(message, None, "–§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è", "cry", filters_markup)


# –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ
@dp.message_handler(lambda message: message.text == "–Ø —É—Å—Ç–∞–ª",
                    state=FilterBotStates.ImageDownload.download_done)
async def image_processing(message: types.Message):
    await FilterBotStates.StartManagment.ice_cream_not_done.set()
    await send_img_text_sticker(message, None, "–ë–µ–¥–Ω–µ–Ω—å–∫–∏–π, –¥–∞–≤–∞–π —è —Ç–µ–±—è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è ...", "relax",
                                start_markup)


# –û–±—Ä–∞–±–∞—Ç–≤—ã–µ–º –≥–∏—Ñ–∫—É –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
@dp.message_handler(content_types=[types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
    await message.reply_animation(message.animation.file_id)


# –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
@dp.message_handler(state="*")
async def echo_message(message):
    await FilterBotStates.StartManagment.ice_cream_not_done.set()
    await send_img_text_sticker(message, None,
                                "–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢\n" + \
                                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n/start - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ \n" + \
                                "/help - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É—Ä–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö", "noanswer", start_markup)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
